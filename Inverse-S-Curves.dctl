DEFINE_UI_PARAMS(sSteep, Curve Steepness, DCTLUI_SLIDER_FLOAT, 6, 1, 30, 1.0)
DEFINE_UI_PARAMS(sMid, Mid Point, DCTLUI_SLIDER_FLOAT, 0.41, 0, 1, 0.1)
DEFINE_UI_PARAMS(curveChoice, Inverse Curve Type, DCTLUI_COMBO_BOX, 0, {logType, abType, alType, tanType}, {Logistic,Absolute,Square,Hyperbolic Tangent})
DEFINE_UI_PARAMS(timeGamma, Timeline Gamma, DCTLUI_COMBO_BOX, 0, {recGam, linGam}, {Scene,Linear})

__CONSTANT__ float sHeight = 1.0f;

__DEVICE__ float invLogFunc(float s_H, float s_S, float s_M, float x) {
	return (_logf((s_H / x) - 1.0f) / (- s_S)) + s_M ;
}

__DEVICE__ float invTanFunc(float s_H, float s_S, float s_M, float x) {
	return ((_atanhf((x - (s_H / 2.0f))/(s_H / 2.0f)) / s_S) + s_M);
}

__DEVICE__ float invAbFunc(float s_H, float s_S, float s_M, float x) {
	if(x >= s_M) return (- s_H * s_S * s_M + 0.5 * s_H + x * s_S * s_M - x) / (s_S * (x - s_H));
	else if(x <= s_M && x>= 0.0f) return -1.0f * ((0.5 * s_H - x * s_S * s_M - x) / (x * s_S));
	else return x;
}

__DEVICE__ float invAlFunc(float s_H, float s_S, float s_M, float x) {

	float xVal = (2.0f * x / s_H - 1.0f) * (2.0f * x / s_H - 1.0f);
	float val = _sqrtf((1.0f / s_S) / (1.0f / xVal - 1.0f));

	if(x >= s_M) return val + s_M;
	else if(x <= s_M && x >= 0.0f) return (-1.0f * val) + s_M;
	else return x;
}

__DEVICE__ float rec_to_lin(float x) {
	if(x < 0.081f) return (x / 4.5f);
	else return _powf((x + 0.099f)/1.099f,(1.0f/0.45f));
}

__DEVICE__ float lin_to_rec(float x) {
	if(x < .0018f) return 4.5f * x;
	else return 1.099f * _powf(x,0.45f) - 0.099f;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

	if(timeGamma == linGam) {
		p_R = lin_to_rec(p_R);
		p_G = lin_to_rec(p_G);
		p_B = lin_to_rec(p_B);
	}

	switch(curveChoice) {
		case tanType:
			p_R = invTanFunc(sHeight,sSteep,sMid,p_R);
			p_G = invTanFunc(sHeight,sSteep,sMid,p_G);
			p_B = invTanFunc(sHeight,sSteep,sMid,p_B);
			break;
		case abType:
			p_R = invAbFunc(sHeight,sSteep,sMid,p_R);
			p_G = invAbFunc(sHeight,sSteep,sMid,p_G);
			p_B = invAbFunc(sHeight,sSteep,sMid,p_B);
			break;
		case alType:
			p_R = invAlFunc(sHeight,sSteep,sMid,p_R);
			p_G = invAlFunc(sHeight,sSteep,sMid,p_G);
			p_B = invAlFunc(sHeight,sSteep,sMid,p_B);
			break;
		default: //Logistic
			p_R = invLogFunc(sHeight,sSteep,sMid,p_R);
			p_G = invLogFunc(sHeight,sSteep,sMid,p_G);
			p_B = invLogFunc(sHeight,sSteep,sMid,p_B);
			break;
	}

	if(timeGamma == linGam) {
		p_R = rec_to_lin(p_R);
		p_G = rec_to_lin(p_G);
		p_B = rec_to_lin(p_B);
	}

	return make_float3(p_R,p_G,p_B);
}
